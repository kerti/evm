definitions:
  model.Container:
    properties:
      ballCount:
        type: integer
      capacity:
        type: integer
      id:
        type: string
      playerId:
        type: string
    type: object
  model.ContainerInput:
    properties:
      capacity:
        type: integer
      id:
        type: string
      playerId:
        type: string
    type: object
  model.Page:
    properties:
      items:
        type: object
      page:
        type: integer
      pageSize:
        type: integer
      totalCount:
        type: integer
      totalPages:
        type: integer
    type: object
  model.Player:
    properties:
      containers:
        items:
          $ref: '#/definitions/model.Container'
        type: array
      id:
        type: string
      name:
        type: string
      readyToPlay:
        type: boolean
    type: object
  model.PlayerAddBallInput:
    properties:
      playerId:
        type: string
    type: object
  model.PlayerInput:
    properties:
      id:
        type: string
      name:
        type: string
    type: object
  response.BaseResponse:
    properties:
      data:
        type: object
      error:
        type: string
      message:
        type: string
    type: object
info:
  contact: {}
  description: Submitted as part of Evermos Backend Engineer Assessment
  license:
    name: MIT
  title: Tennis Player API
  version: "1.0"
paths:
  /containers:
    post:
      consumes:
      - application/json
      description: Creates a new Container.
      parameters:
      - description: Input in the form of Container JSON.
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/model.ContainerInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/model.Container'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.BaseResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/response.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Create a Container.
      tags:
      - containers
  /health:
    get:
      description: |-
        Performs a check on the server's health status.
        Returns HTTP 200/OK if healthy,
        returns HTTP 503/Service Unavailable otherwise.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.BaseResponse'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Health check.
      tags:
      - health
  /players:
    post:
      consumes:
      - application/json
      description: Creates a new Player.
      parameters:
      - description: Input in the form of Player JSON.
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/model.PlayerInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/model.Player'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.BaseResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/response.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Create a Player.
      tags:
      - players
  /players/:
    get:
      description: Resolves a Page of Players based on page and page size parameters.
      parameters:
      - description: The page number. Defaults to 1.
        in: query
        name: page
        type: integer
      - description: The number of records on a page. Defaults to 10.
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/model.Page'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Resolve a Page of Players.
      tags:
      - players
  /players/{id}:
    get:
      description: Resolves a Player by its ID.
      parameters:
      - description: The Player's identifier.
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/model.Player'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.BaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Resolve a Player.
      tags:
      - players
  /players/addBall:
    post:
      consumes:
      - application/json
      description: Add balls to containers belonging to a particular user.
      parameters:
      - description: Input specifying the player ID.
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/model.PlayerAddBallInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.BaseResponse'
            - properties:
                data:
                  $ref: '#/definitions/model.Player'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.BaseResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/response.BaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.BaseResponse'
      summary: Add balls.
      tags:
      - players
swagger: "2.0"
